# Calendario del Programa (24 semanas)

> Semanas 1–12 = Núcleo del lenguaje (Bloques 0–3).  
> Semanas 13–20 = Elige una rama (A: Web/Backend & DevOps, B: Escritorio + BD).  
> Semanas 21–24 = Integrador + Portafolio + Revisión final.

---

## Semanas 1–12 · Núcleo del lenguaje

### S1 — Entorno, sintaxis y tipos

<!-- VIDEOS_BASE:S1 START -->
### Videos base — S1

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [Fundamentos de Python (curso base en español)](https://www.youtube.com/watch?v=Kp4Mvapo5kc) — temas: fundamentos, estructuras, funciones, poo_basica
- [Playlist alternativa de fundamentos (español)](https://www.youtube.com/playlist?list=PLyvsggKtwbLW1j0d5yaCkRF9Axpdlhsxz) — temas: fundamentos, estructuras, poo
- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Serie 4 · Video 1/4 — Fundamentos](https://www.youtube.com/watch?v=BRGZiD5RJrU) — temas: instalacion, tipos, control_flujo, estructuras, funciones, match_case

<!-- VIDEOS_BASE:S1 END -->



- Metas: instalar 3.12, VS Code, Git; `venv`; `print/input` y tipos.
- 3 ejercicios: eco, suma/promedio, conversor minutos↔horas.
- Mini-proyecto: “Hola Agenda”.
- Criterio salida: repo `python-boot`, `venv`, `hello.py` corre.

### S2 — Strings y operadores

<!-- VIDEOS_BASE:S2 START -->
### Videos base — S2

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [Fundamentos de Python (curso base en español)](https://www.youtube.com/watch?v=Kp4Mvapo5kc) — temas: fundamentos, estructuras, funciones, poo_basica
- [Playlist alternativa de fundamentos (español)](https://www.youtube.com/playlist?list=PLyvsggKtwbLW1j0d5yaCkRF9Axpdlhsxz) — temas: fundamentos, estructuras, poo
- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Serie 4 · Video 1/4 — Fundamentos](https://www.youtube.com/watch?v=BRGZiD5RJrU) — temas: instalacion, tipos, control_flujo, estructuras, funciones, match_case

<!-- VIDEOS_BASE:S2 END -->



- Metas: `str` (métodos/slicing), f-strings, aritméticos y lógicos.
- Ejercicios: normalizador, contraseña, recibo.
- Mini-proyecto: Madlibs CLI.

### S3 — Control de flujo

<!-- VIDEOS_BASE:S3 START -->
### Videos base — S3

- [Fundamentos de Python (curso base en español)](https://www.youtube.com/watch?v=Kp4Mvapo5kc) — temas: fundamentos, estructuras, funciones, poo_basica
- [Playlist alternativa de fundamentos (español)](https://www.youtube.com/playlist?list=PLyvsggKtwbLW1j0d5yaCkRF9Axpdlhsxz) — temas: fundamentos, estructuras, poo
- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Serie 4 · Video 1/4 — Fundamentos](https://www.youtube.com/watch?v=BRGZiD5RJrU) — temas: instalacion, tipos, control_flujo, estructuras, funciones, match_case

<!-- VIDEOS_BASE:S3 END -->




- Metas: `if/elif/else`, condicionales, `match/case`.
- Ejercicios: IMC, impuesto, enrutador.
- Mini-proyecto: cronómetro CLI (countdown).

### S4 — Estructuras de datos

<!-- VIDEOS_BASE:S4 START -->
### Videos base — S4

- [Playlist alternativa de fundamentos (español)](https://www.youtube.com/playlist?list=PLyvsggKtwbLW1j0d5yaCkRF9Axpdlhsxz) — temas: fundamentos, estructuras, poo
- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes

<!-- VIDEOS_BASE:S4 END -->



- Metas: listas, tuplas, sets, dicts.
- Ejercicios: carrito, phonebook, deduplicador.
- Mini-proyecto: Quiz Game.

### S5 — Funciones y módulos

<!-- VIDEOS_BASE:S5 START -->
### Videos base — S5

- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes

<!-- VIDEOS_BASE:S5 END -->



- Metas: args por defecto/clave, `*args/**kwargs`, módulos, `if __name__ == "__main__"`.
- Ejercicios: formatter, agregador, dispatch.
- Mini-proyecto: paquete `util_text/`.

### S6 — POO I

<!-- VIDEOS_BASE:S6 START -->
### Videos base — S6

- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Python intermedio — dates, comprehensions, lambdas, regex, archivos, paquetes](https://www.youtube.com/watch?v=TbcEqkabAWU) — temas: datetime, list_comprehension, lambdas, hof, errores, file_io, regex, paquetes

<!-- VIDEOS_BASE:S6 END -->



- Metas: clases, `__init__`, `__str__/__repr__`.
- Ejercicios: Producto, Carrito, Ticket.
- Mini-proyecto: Tienda CLI.

### S7 — POO II

<!-- VIDEOS_BASE:S7 START -->
### Videos base — S7

- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Python intermedio — dates, comprehensions, lambdas, regex, archivos, paquetes](https://www.youtube.com/watch?v=TbcEqkabAWU) — temas: datetime, list_comprehension, lambdas, hof, errores, file_io, regex, paquetes

<!-- VIDEOS_BASE:S7 END -->




- Metas: herencia, encapsulamiento, polimorfismo, abstracción, `@property`.
- Ejercicios: Empleado/Gerente; Figura/Rect/Circ; propiedades.
- Mini-proyecto: Nómina.

### S8 — Archivos, `datetime`, regex

<!-- VIDEOS_BASE:S8 START -->
### Videos base — S8

- [Playlist — Python desde cero (micro-lecciones)](https://www.youtube.com/playlist?list=PLZPZq0r_RZOOkUQbat8LyQii36cJf2SWT) — temas: fundamentos, mini_proyectos, estructuras, poo, tkinter, threads, processes
- [Python intermedio — dates, comprehensions, lambdas, regex, archivos, paquetes](https://www.youtube.com/watch?v=TbcEqkabAWU) — temas: datetime, list_comprehension, lambdas, hof, errores, file_io, regex, paquetes

<!-- VIDEOS_BASE:S8 END -->



- Metas: TXT/CSV/JSON, `datetime`, `re`.
- Ejercicios: bitácora, parser de logs, conversor de zona.
- Mini-proyecto: Limpieza CSV.

### S9 — Excepciones, depuración, doc, venv/pip

<!-- VIDEOS_BASE:S9 START -->
### Videos base — S9

- [Python intermedio — dates, comprehensions, lambdas, regex, archivos, paquetes](https://www.youtube.com/watch?v=TbcEqkabAWU) — temas: datetime, list_comprehension, lambdas, hof, errores, file_io, regex, paquetes
- [Serie 4 · Video 2/4 — POO, módulos, decoradores, generadores](https://www.youtube.com/watch?v=EuyAAPx21Cs) — temas: poo, modulos, venv, pip, decoradores, generadores, debug, doc

<!-- VIDEOS_BASE:S9 END -->



- Metas: `try/except/else/finally`, `raise`, `assert`, docstrings, depurar VS Code, entornos.
- Ejercicios: validador robusto, wrapper con logging, bug & fix.
- Mini-proyecto: empaquetar `util_text` (pyproject).

### S10 — Comprehensions, lambdas, HOF

<!-- VIDEOS_BASE:S10 START -->
### Videos base — S10

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [Serie 4 · Video 2/4 — POO, módulos, decoradores, generadores](https://www.youtube.com/watch?v=EuyAAPx21Cs) — temas: poo, modulos, venv, pip, decoradores, generadores, debug, doc

<!-- VIDEOS_BASE:S10 END -->




- Metas: list/dict/set comprehensions, `map/filter/reduce`.
- Ejercicios: transformaciones, filtro, agregaciones.
- Mini-proyecto: mini-ETL CSV→JSON.

### S11 — Decoradores y generadores

<!-- VIDEOS_BASE:S11 START -->
### Videos base — S11

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [Serie 4 · Video 2/4 — POO, módulos, decoradores, generadores](https://www.youtube.com/watch?v=EuyAAPx21Cs) — temas: poo, modulos, venv, pip, decoradores, generadores, debug, doc

<!-- VIDEOS_BASE:S11 END -->






- Metas: `@decorator` (con/ sin params), `yield`, iteradores.
- Ejercicios: `@timed`, `@retry`; `read_chunks()`.
- Mini-proyecto: librería `toolbox/` (con tests).

### S12 — Concurrencia y rendimiento

<!-- VIDEOS_BASE:S12 START -->
### Videos base — S12

- [Serie 4 · Video 2/4 — POO, módulos, decoradores, generadores](https://www.youtube.com/watch?v=EuyAAPx21Cs) — temas: poo, modulos, venv, pip, decoradores, generadores, debug, doc

<!-- VIDEOS_BASE:S12 END -->




- Metas: `asyncio`, `threading` vs `multiprocessing`, `cProfile`, `lru_cache`.
- Ejercicios: downloader concurrente, CPU-bound, profiling+cache.
- Mini-proyecto: crawler concurrente.

---

## Semanas 13–20 · Rama A — Web/Backend & DevOps

### S13 — FastAPI fundamentos

<!-- VIDEOS_BASE:S13 START -->
### Videos base — S13

_(No se encontraron videos para esta semana en resources/videos.yml)_
<!-- VIDEOS_BASE:S13 END -->




- Rutas, validación Pydantic. MP: “Catálogo” (GET/POST).

### S14 — DB y ORM

<!-- VIDEOS_BASE:S14 START -->
### Videos base — S14

_(No se encontraron videos para esta semana en resources/videos.yml)_
<!-- VIDEOS_BASE:S14 END -->




- SQLAlchemy + Alembic; migraciones. MP: CRUD persistente.

### S15 — Auth & Seguridad

<!-- VIDEOS_BASE:S15 START -->
### Videos base — S15

_(No se encontraron videos para esta semana en resources/videos.yml)_
<!-- VIDEOS_BASE:S15 END -->



- OAuth2/JWT, CORS. MP: endpoints protegidos.

### S16 — Testing & Observabilidad

<!-- VIDEOS_BASE:S16 START -->
### Videos base — S16

_(No se encontraron videos para esta semana en resources/videos.yml)_
<!-- VIDEOS_BASE:S16 END -->



- pytest + httpx; logging/metrics. MP: suite CI local.

### S17 — Docker & Compose

<!-- VIDEOS_BASE:S17 START -->
### Videos base — S17

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [PyQt5 (segmentos del curso largo)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: pyqt5, layouts, estilos, inputs, mini_apps · pyqt5_intro: 09:22:19

<!-- VIDEOS_BASE:S17 END -->



- Dockerfile multi-stage; compose (app+DB). MP: entorno reproducible.

### S18 — CI/CD

<!-- VIDEOS_BASE:S18 START -->
### Videos base — S18

- [Curso largo — Bro Code (12h, PyQt5 y APIs)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: fundamentos, decoradores, poo, file_io, fechas, threads, apis, pyqt5 · decoradores: 08:07:33, pyqt5_intro: 09:22:19
- [PyQt5 (segmentos del curso largo)](https://www.youtube.com/watch?v=ix9cRaBkVe0) — temas: pyqt5, layouts, estilos, inputs, mini_apps · pyqt5_intro: 09:22:19

<!-- VIDEOS_BASE:S18 END -->



- GitHub Actions: lint+tests+build+push. MP: pipeline functional.

### S19 — Realtime & Cache

<!-- VIDEOS_BASE:S19 START -->
### Videos base — S19

- [FastAPI — CRUD, Routers, OAuth2/JWT, Mongo/Atlas](https://www.youtube.com/watch?v=_y9qQZXE24A) — temas: fastapi, crud, routers, auth, oauth2, jwt, mongodb, atlas
- [Serie 4 · Video 3/4 — Tkinter GUI completo](https://www.youtube.com/watch?v=NqEtAaQsC9M) — temas: tkinter, gui, eventos, layouts, dialogos, treeview, notebook, ttk
- [Tkinter completo — GUI widgets/eventos/layouts](https://www.youtube.com/watch?v=NqEtAaQsC9M) — temas: tkinter, widgets, eventos, layouts, ttk, dialogos, treeview, notebook
- [Web con Python — UI/maquetación/estilos](https://www.youtube.com/watch?v=n2YrGsXJC6Y) — temas: ui, maquetacion, estilos, responsive, accesibilidad, deploy

<!-- VIDEOS_BASE:S19 END -->



- WebSockets o SSE; cache (Redis opc.). MP: tablero en vivo.

### S20 — Integrador Web

<!-- VIDEOS_BASE:S20 START -->
### Videos base — S20

- [FastAPI — CRUD, Routers, OAuth2/JWT, Mongo/Atlas](https://www.youtube.com/watch?v=_y9qQZXE24A) — temas: fastapi, crud, routers, auth, oauth2, jwt, mongodb, atlas
- [Serie 4 · Video 3/4 — Tkinter GUI completo](https://www.youtube.com/watch?v=NqEtAaQsC9M) — temas: tkinter, gui, eventos, layouts, dialogos, treeview, notebook, ttk
- [Tkinter completo — GUI widgets/eventos/layouts](https://www.youtube.com/watch?v=NqEtAaQsC9M) — temas: tkinter, widgets, eventos, layouts, ttk, dialogos, treeview, notebook

<!-- VIDEOS_BASE:S20 END -->



- API completa + OpenAPI + deploy. Salida: `git push`→CI/CD OK.

---

## Semanas 13–20 · Rama B — Escritorio + BD

### S13 — Tkinter base (o PyQt5)

- Ventanas, widgets, layout. MP: editor de notas.

### S14 — Arquitectura GUI + Estado

- MVC/MVP, eventos, _thread-safe_. MP: tarea larga + progreso.

### S15 — Persistencia

- SQLite/MySQL; DAO/ORM. MP: CRUD con filtros.

### S16 — Validación & UX

- Validaciones, diálogos, accesibilidad, i18n. MP: form robusto.

### S17 — Integración externa

- API `requests` desde GUI, timeouts y retries. MP: visor de clima/datos.

### S18 — Reportes/Exportación

- CSV/Excel/PDF. MP: export masiva no bloqueante.

### S19 — Empaquetado

- PyInstaller/Briefcase. MP: instalador `.exe/.app`.

### S20 — Integrador Escritorio

- App completa GUI+DB empaquetada. Salida: binario + guía.

---

## Semanas 21–24 · Integrador, Portafolio, Revisión

### S21 — Capstone (Diseño)

<!-- VIDEOS_BASE:S21 START -->
### Videos base — S21

- [FastAPI — CRUD, Routers, OAuth2/JWT, Mongo/Atlas](https://www.youtube.com/watch?v=_y9qQZXE24A) — temas: fastapi, crud, routers, auth, oauth2, jwt, mongodb, atlas
- [MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Serie 4 · Video 4/4 — MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter

<!-- VIDEOS_BASE:S21 END -->



- Alcance, historias, arquitectura, riesgos.

### S22 — Capstone (Construcción)

<!-- VIDEOS_BASE:S22 START -->
### Videos base — S22

- [MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Serie 4 · Video 4/4 — MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Web avanzado — Docker, CORS, CI/CD, Supabase/PostgreSQL, realtime](https://www.youtube.com/watch?v=bNy8OZJfA6I) — temas: docker, cors, ci_cd, github_actions, infra, supabase, postgresql, realtime

<!-- VIDEOS_BASE:S22 END -->



- Base + pruebas. Entrega alpha.

### S23 — Capstone (Endurecimiento)

<!-- VIDEOS_BASE:S23 START -->
### Videos base — S23

- [MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Serie 4 · Video 4/4 — MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Web avanzado — Docker, CORS, CI/CD, Supabase/PostgreSQL, realtime](https://www.youtube.com/watch?v=bNy8OZJfA6I) — temas: docker, cors, ci_cd, github_actions, infra, supabase, postgresql, realtime

<!-- VIDEOS_BASE:S23 END -->



- Pruebas, profiling, seguridad básica, docs, deploy/instalador.

### S24 — Portafolio & Review

<!-- VIDEOS_BASE:S24 START -->
### Videos base — S24

- [MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Serie 4 · Video 4/4 — MySQL + Python + App GUI (CRUD por etapas)](https://www.youtube.com/watch?v=Ca6BOvW6ZMM) — temas: mysql, crud, backup, vistas, joins, customtkinter
- [Web avanzado — Docker, CORS, CI/CD, Supabase/PostgreSQL, realtime](https://www.youtube.com/watch?v=bNy8OZJfA6I) — temas: docker, cors, ci_cd, github_actions, infra, supabase, postgresql, realtime

<!-- VIDEOS_BASE:S24 END -->



- Publica 3 piezas: capstone, toolbox, demo de la otra rama.
- Code-review final + plan de mejora a 90 días.

---

## Prompts listos

**Sesión diaria:** Actúa como mentor. Tema: {{tema}}. 1) teoría breve, 2) 3 ejercicios con _tests_ (pytest), 3) mini-proyecto 30’ con criterios, 4) quiz (5).  
**Revisión de código:** Evalúa PEP8/claridad/robustez; 5 mejoras y diff de refactor; casos límite.  
**Gate por bloque:** Valida criterios del bloque {{B#}}; si no, plan de refuerzo (1 semana).
