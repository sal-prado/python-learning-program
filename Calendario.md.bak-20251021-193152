# Calendario del Programa (24 semanas)

> Semanas 1–12 = Núcleo del lenguaje (Bloques 0–3).  
> Semanas 13–20 = Elige una rama (A: Web/Backend & DevOps, B: Escritorio + BD).  
> Semanas 21–24 = Integrador + Portafolio + Revisión final.

---

## Semanas 1–12 · Núcleo del lenguaje

### S1 — Entorno, sintaxis y tipos

- Metas: instalar 3.12, VS Code, Git; `venv`; `print/input` y tipos.
- 3 ejercicios: eco, suma/promedio, conversor minutos↔horas.
- Mini-proyecto: “Hola Agenda”.
- Criterio salida: repo `python-boot`, `venv`, `hello.py` corre.

### S2 — Strings y operadores

- Metas: `str` (métodos/slicing), f-strings, aritméticos y lógicos.
- Ejercicios: normalizador, contraseña, recibo.
- Mini-proyecto: Madlibs CLI.

### S3 — Control de flujo

- Metas: `if/elif/else`, condicionales, `match/case`.
- Ejercicios: IMC, impuesto, enrutador.
- Mini-proyecto: cronómetro CLI (countdown).

### S4 — Estructuras de datos

- Metas: listas, tuplas, sets, dicts.
- Ejercicios: carrito, phonebook, deduplicador.
- Mini-proyecto: Quiz Game.

### S5 — Funciones y módulos

- Metas: args por defecto/clave, `*args/**kwargs`, módulos, `if __name__ == "__main__"`.
- Ejercicios: formatter, agregador, dispatch.
- Mini-proyecto: paquete `util_text/`.

### S6 — POO I

- Metas: clases, `__init__`, `__str__/__repr__`.
- Ejercicios: Producto, Carrito, Ticket.
- Mini-proyecto: Tienda CLI.

### S7 — POO II

- Metas: herencia, encapsulamiento, polimorfismo, abstracción, `@property`.
- Ejercicios: Empleado/Gerente; Figura/Rect/Circ; propiedades.
- Mini-proyecto: Nómina.

### S8 — Archivos, `datetime`, regex

- Metas: TXT/CSV/JSON, `datetime`, `re`.
- Ejercicios: bitácora, parser de logs, conversor de zona.
- Mini-proyecto: Limpieza CSV.

### S9 — Excepciones, depuración, doc, venv/pip

- Metas: `try/except/else/finally`, `raise`, `assert`, docstrings, depurar VS Code, entornos.
- Ejercicios: validador robusto, wrapper con logging, bug & fix.
- Mini-proyecto: empaquetar `util_text` (pyproject).

### S10 — Comprehensions, lambdas, HOF

- Metas: list/dict/set comprehensions, `map/filter/reduce`.
- Ejercicios: transformaciones, filtro, agregaciones.
- Mini-proyecto: mini-ETL CSV→JSON.

### S11 — Decoradores y generadores

- Metas: `@decorator` (con/ sin params), `yield`, iteradores.
- Ejercicios: `@timed`, `@retry`; `read_chunks()`.
- Mini-proyecto: librería `toolbox/` (con tests).

### S12 — Concurrencia y rendimiento

- Metas: `asyncio`, `threading` vs `multiprocessing`, `cProfile`, `lru_cache`.
- Ejercicios: downloader concurrente, CPU-bound, profiling+cache.
- Mini-proyecto: crawler concurrente.

---

## Semanas 13–20 · Rama A — Web/Backend & DevOps

### S13 — FastAPI fundamentos

- Rutas, validación Pydantic. MP: “Catálogo” (GET/POST).

### S14 — DB y ORM

- SQLAlchemy + Alembic; migraciones. MP: CRUD persistente.

### S15 — Auth & Seguridad

- OAuth2/JWT, CORS. MP: endpoints protegidos.

### S16 — Testing & Observabilidad

- pytest + httpx; logging/metrics. MP: suite CI local.

### S17 — Docker & Compose

- Dockerfile multi-stage; compose (app+DB). MP: entorno reproducible.

### S18 — CI/CD

- GitHub Actions: lint+tests+build+push. MP: pipeline functional.

### S19 — Realtime & Cache

- WebSockets o SSE; cache (Redis opc.). MP: tablero en vivo.

### S20 — Integrador Web

- API completa + OpenAPI + deploy. Salida: `git push`→CI/CD OK.

---

## Semanas 13–20 · Rama B — Escritorio + BD

### S13 — Tkinter base (o PyQt5)

- Ventanas, widgets, layout. MP: editor de notas.

### S14 — Arquitectura GUI + Estado

- MVC/MVP, eventos, _thread-safe_. MP: tarea larga + progreso.

### S15 — Persistencia

- SQLite/MySQL; DAO/ORM. MP: CRUD con filtros.

### S16 — Validación & UX

- Validaciones, diálogos, accesibilidad, i18n. MP: form robusto.

### S17 — Integración externa

- API `requests` desde GUI, timeouts y retries. MP: visor de clima/datos.

### S18 — Reportes/Exportación

- CSV/Excel/PDF. MP: export masiva no bloqueante.

### S19 — Empaquetado

- PyInstaller/Briefcase. MP: instalador `.exe/.app`.

### S20 — Integrador Escritorio

- App completa GUI+DB empaquetada. Salida: binario + guía.

---

## Semanas 21–24 · Integrador, Portafolio, Revisión

### S21 — Capstone (Diseño)

- Alcance, historias, arquitectura, riesgos.

### S22 — Capstone (Construcción)

- Base + pruebas. Entrega alpha.

### S23 — Capstone (Endurecimiento)

- Pruebas, profiling, seguridad básica, docs, deploy/instalador.

### S24 — Portafolio & Review

- Publica 3 piezas: capstone, toolbox, demo de la otra rama.
- Code-review final + plan de mejora a 90 días.

---

## Prompts listos

**Sesión diaria:** Actúa como mentor. Tema: {{tema}}. 1) teoría breve, 2) 3 ejercicios con _tests_ (pytest), 3) mini-proyecto 30’ con criterios, 4) quiz (5).  
**Revisión de código:** Evalúa PEP8/claridad/robustez; 5 mejoras y diff de refactor; casos límite.  
**Gate por bloque:** Valida criterios del bloque {{B#}}; si no, plan de refuerzo (1 semana).
